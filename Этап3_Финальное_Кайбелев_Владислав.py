import datetime


### Функция для проверки корректности введённых данных пользователя
### Именно в этом случае проверка варианта ответа для выбора меню
def correct_choice_int():
    while True:

        choice = input()

        ### Если пользователь вводит не число
        ### Выполняется конструкция: выводит ошибку, выводит меню и спрашивает новые данные, затем кидает к началу цикла, где input() запрашивает ввод данных
        try:
            int(choice)
        except ValueError:
            print("\nНеверный выбор. Попробуйте снова.")
            menu()
            print("Ваш выбор: ", end='')
            continue

        ### Если пользователь ввёл число не из указанного диапазона (от 1 по 6)
        ### Выполняется условие: выводит ошибку, выводит меню и спрашивает новые данные, затем кидает к началу цикла, где input() запрашивает ввод данных
        if int(choice) > 6 or int(choice) < 1:
            print("\nНеверный выбор. Попробуйте снова.")
            menu()
            print("Ваш выбор: ", end='')
            continue

        ### Если ни одно условие ранее не выполнилось, значит пользователь ввёл данные верно
        ### Возвращаем данный вариант ответа и заканчиваем функцию
        return int(choice)


### Функция для проверки корректности введённых данных пользователя
### Именно в этом случае проверка на индекс в диапазоне основного списка notes для обновления функции(update_note)
def correct_index_int_for_update():
    while True:

        choice = input("Введите номер заметки, которую желаете обновить: ")

        ### Если пользователь вводит не число
        ### Выполняется конструкция: выводит ошибку, выводит все заметки, затем кидает к началу цикла, где input() запрашивает ввод данных
        try:
            int(choice)
        except ValueError:
            print("\nЗаметки под таким номером не существует. Попробуйте снова.")
            display_notes(notes)
            continue

        ### Если пользователь ввёл индекс вне диапазона
        ### Выполняется условие: выводит ошибку, выводит все заметки, затем кидает к началу цикла, где input() запрашивает ввод данных
        if int(choice) < 1 or int(choice) > len(notes):
            print("\nЗаметки под таким номером не существует. Попробуйте снова.")
            display_notes(notes)
            continue

        ### Если ни одно условие ранее не выполнилось, значит пользователь ввёл данные верно
        ### Возвращаем данный вариант ответа и заканчиваем функцию
        return int(choice)


### Функция для проверки корректности введённых данных пользователя
### Именно в этом случае проверка на индекс в диапазоне основного списка notes для удаления функции(delete_note)
def correct_index_int_for_delete():
    while True:

        choice = input("Введите номер заметки, которую желаете удалить: ")

        ### Если пользователь вводит не число
        ### Выполняется конструкция: выводит ошибку, выводит все заметки, затем кидает к началу цикла, где input() запрашивает ввод данных
        try:
            int(choice)
        except ValueError:
            print("\nЗаметки под таким номером не существует. Попробуйте снова.")
            display_notes(notes)
            continue

        ### Если пользователь ввёл индекс вне диапазона
        ### Выполняется условие: выводит ошибку, выводит все заметки, затем кидает к началу цикла, где input() запрашивает ввод данных
        if int(choice) < 1 or int(choice) > len(notes):
            print("\nЗаметки под таким номером не существует. Попробуйте снова.")
            display_notes(notes)
            continue

        ### Если ни одно условие ранее не выполнилось, значит пользователь ввёл данные верно
        ### Возвращаем данный вариант ответа и заканчиваем функцию
        return int(choice)


### Функция вывода интерактивного меню
def menu():
    ### Интерактивное меню
    print("\n-------------------------")
    print("Меню действий:")
    print("1. Создать новую заметку")
    print("2. Показать все заметки")
    print("3. Обновить заметку")
    print("4. Удалить заметку")
    print("5. Найти заметки")
    print("6. Выйти из программы")
    print("-------------------------\n")


### Функция создания заметки
def create_note():
    ### Ввод описания заметки и проверка на пустую строку
    username = input("Введите имя пользователя: ")
    ### Проверка на пустой ввод
    if len(username.split()) == 0:
        while len(username.split()) == 0:
            print("\nВы ничего не ввели. Попробуйте снова")
            username = input("\nВведите имя пользователя: ")

    ### Ввод описания заметки и проверка на пустую строку
    title = input("Введите заголовок заметки: ")
    ### Проверка на пустой ввод
    if len(title.split()) == 0:
        while len(title.split()) == 0:
            print("\nВы ничего не ввели. Попробуйте снова")
            title = input("\nВведите заголовок заметки: ")

    ### Ввод описания заметки и проверка на пустую строку
    content = input("Введите описание заметки: ")
    ### Проверка на пустой ввод
    if len(content.split()) == 0:
        while len(content.split()) == 0:
            print("\nВы ничего не ввели. Попробуйте снова")
            content = input("\nВведите описание заметки: ")

    ### Ввод статуса заметки и проверка на пустую строку
    status = input("Введите статус заметки (например, 'Новая', 'Активна', 'Выполнена'): ")
    ### Проверка на пустой ввод
    if len(status.split()) == 0:
        while len(status.split()) == 0:
            print("\nВы ничего не ввели. Попробуйте снова")
            status = input("\nВведите статус заметки (например, 'Новая', 'Активна', 'Выполнена'): ")

    created_date = datetime.datetime.now()  ### Возвращаем текущую дату

    issue_date = input("Введите дату дедлайна (день-месяц-год): ")

    ### Проверка корректности введённой даты с помощью цикла и конструкции try-except
    ### Данный блок кода позволяет обработать два варианта введённой даты, день-месяц-год и день/месяц/год
    while True:
        try:
            datetime.datetime.strptime(issue_date, '%d-%m-%Y')
        except ValueError:
            try:
                datetime.datetime.strptime(issue_date, '%d/%m/%Y')
            except ValueError:
                issue_date = input(
                    "\nВы ввели дату в неправильном формате. Попробуйте ещё раз\nВведите дату дедлайна (день-месяц-год): ")
                continue
        break

    ### Если пользователь ввёл дату в формате день/месяц/год, меняем '/' на '-', чтобы все даты выводились в одном формате
    issue_date = issue_date.replace('/', '-')

    dict_note = {'username': username, 'title': title, 'content': content, 'status': status,
                 'created_date': created_date.strftime("%d-%m-%Y"),
                 'issue_date': issue_date}

    ### Возвращаем созданную заметку в виде словаря
    return dict_note


### Функция для вывода заметок
### Если при вызове функции заметок ещё нет, то функция возвращает нам False
def display_notes(notes):
    print("\nСписок заметок:")

    for i in range(0, len(notes)):
        for _ in notes[i]:
            print("-----------------------------")
            print(f"Заметка №{i + 1}")
            print(f"Имя пользователя: {notes[i]['username']}")
            print(f"Заголовок: {notes[i]['title']}")
            print(f"Описание: {notes[i]['content']}")
            print(f"Статус: {notes[i]['status']}")
            print(f"Дата создания: {notes[i]['created_date']}")
            print(f"Дедлайн: {notes[i]['issue_date']}")
            break
    print("-----------------------------")


### Функция для обновления заметки
def update_note(note):
    ### Цикл проверяет корректность введенных данных
    ### Если пользователь вводит что-то не из списка(username, title, content, status, issue_date) или вводит с ошибкой
    ### Программа уведомляет его об этом, и переспрашивает
    while True:
        ### Переменная: данные для обновления. Содержит в себе ключ из словаря
        data_to_update = input(
            '\nКакие данные вы хотите обновить? Введите одно из списка (username, title, content, status, issue_date): ')
        if data_to_update not in note:
            print("\nВы ввели некорректные данные для обновления заметки. Попробуйте снова")
            continue
        break

    ### Если пользователь вводит issue_date, начнёт выполняться данный блок кода с циклом на проверку корректности введённой даты
    if data_to_update == 'issue_date':
        issue_date = input("\nВведите новое значение для issue_date: ")
        ### Проверка корректности введённой даты с помощью цикла и конструкции try-except
        ### Данный блок кода позволяет обработать два варианта введённой даты, день-месяц-год и день/месяц/год
        while True:
            try:
                datetime.datetime.strptime(issue_date, '%d-%m-%Y')
            except ValueError:
                try:
                    datetime.datetime.strptime(issue_date, '%d/%m/%Y')
                except ValueError:
                    issue_date = input(
                        "\nВы ввели дату в неправильном формате. Попробуйте ещё раз\nВведите дату дедлайна (день-месяц-год): ")
                    continue

            ### Если пользователь ввёл дату в формате день/месяц/год, меняем '/' на '-', чтобы все даты выводились в одном формате
            issue_date = issue_date.replace('/', '-')

            ### Меняем дату дедлайна и возвращаем словарь с обновленной датой
            note['issue_date'] = issue_date
            return print("\nЗаметка обновлена!")

    print("\nВведите новое значение для", data_to_update + ":", end=" ")
    ### Переменная: обновлённое значение. Содержит в себе новое значение
    updated_value = input()

    ### Проверка на пустой ввод
    if len(updated_value.split()) == 0:
        while len(updated_value.split()) == 0:
            print("\nВы ничего не ввели. Попробуйте снова")
            print("\nВведите новое значение для", data_to_update + ":", end=" ")
            updated_value = input()

    ### Меняем старое значение на новое по ключу, введённому ранее
    ### note[ключ(data_to_update)] = значение(updated_value)
    note[data_to_update] = updated_value
    return print("\nЗаметка обновлена!")


### Функция для удаления заметки
def delete_note(notes, index_note):
    while True:

        ### Удаляем заметку из списка под индексом, который вводил пользователь
        notes.pop(index_note)

        ### Если длина списка равна нулю, значит пользователь удалил все заметки, программа уведомляет об этом и заканчивает свою работу
        if len(notes) == 0:
            return print("\nУспешно удалено. Заметок больше не осталось.")

        print("\nУспешно удалено. Остались следующие заметки:")
        ### ### Цикл, выводящий первые три пункта заметки
        for i in range(0, len(notes)):
            for _ in notes[i]:
                print("\n----------------------")
                print(f"Заметка №{i + 1}")
                print(f"Имя пользователя: {notes[i]['username']}")
                print(f"Заголовок заметки: {notes[i]['title']}")
                print(f"Описание заметки: {notes[i]['content']}")
                print("----------------------")
                break
        break


### Функция для поиска заметок по слову из следующих разделов: username, title, content и/или статусу
def search_notes(notes, keyword=None, status=None):
    ### В этот список будем записывать индекс словаря из списка заметок для будущего вывода
    index_notes = []

    ### Мы проверяем есть ли keyword в username, title или content и равен ли status статусу заметки
    ### Если были введены оба параметра
    ### len(параметр.split()) проверяет пустая ли строка
    if len(keyword.split()) != 0 and len(status.split()) != 0:
        for i in range(len(notes)):
            if (keyword in notes[i]['username'] or keyword in notes[i]['title'] or keyword in notes[i][
                'content']) and status == notes[i]['status']:
                index_notes.append(i)
    ### Если введён только keyword
    elif len(keyword.split()) != 0:
        for i in range(len(notes)):
            if keyword in notes[i]['username'] or keyword in notes[i]['title'] or keyword in notes[i]['content']:
                index_notes.append(i)
    ### Если введён только status
    elif len(status.split()) != 0:
        for i in range(len(notes)):
            if status == notes[i]['status']:
                index_notes.append(i)

    ### Если в список index_notes ничего не добавилось, значит введённые данные(keyword и status) не соответствуют ни одной заметки
    ### Значит, если длина index_notes = 0, тогда мы возвращаем соответсвующее сообщение и функция прекращает свою работу
    ### Если длина index_notes > 0, тогда данное условие не выполняется и продолжается работа функции
    if len(index_notes) == 0:
        return print("\nЗаметки, соответствующие запросу, не найдены.")

    ### Цикл для вывода заметки в красивом формате, переменная j используется для номера заметки
    print("\nНайдены заметки:\n")
    j = 1
    for i in index_notes:
        print("----------------------")
        print(f"Заметка №{j}:")
        print(f"Имя пользователя: {notes[i]['username']}")
        print(f"Заголовок: {notes[i]['title']}")
        print(f"Описание: {notes[i]['content']}")
        print(f"Статус: {notes[i]['status']}")
        j += 1
    print("----------------------")


if __name__ == "__main__":

    notes = []

    while True:

        ### Вызываем интерактивное меню
        menu()
        print("Ваш выбор: ", end='')

        ### Переменную answer_option приравниваем функции menu(), она тут же вызывается, после возвращает введённые данные пользователя
        ### И теперь, answer_option в себе хранит введённый вариант ответа пользователя
        answer_option = correct_choice_int()

        if answer_option == 1:
            note = create_note()  ### Данная переменная содержит в себе словарь созданной только что заметки
            notes.append(note)  ### Добавляем созданную заметку в наш основной список

        if answer_option == 2:
            ### Мы проверяем с помощью len() размер списка, если len(notes) = 0, то заметок у нас нет
            ### Иначе мы выводим одну или более заметок
            if len(notes) > 0:
                display_notes(notes)
            else:
                print("\nУ вас нет сохранённых заметок. Возвращаю к меню")

        if answer_option == 3:
            if len(notes) > 0:
                ### Выводим все его заметки
                ### Создаем переменную, она будет содержать одно целое число: индекс заметки, которую пользователь хочет обновить.
                ### Функция correct_index_int_for_update() проверяет, чтобы пользователь ввёл целое число в диапазоне индексов списка notes
                ### Задаем параметр для функции update_note(): наш основной список с индексом заметки, которую захотел обновить пользователь
                ### Так как индексирование начинается с 0, у числа введённого пользователем отнимаем 1
                display_notes(notes)
                index_note = correct_index_int_for_update() - 1
                update_note(notes[index_note])
            else:
                print("\nУ вас нет сохранённых заметок. Возвращаю к меню")

        if answer_option == 4:
            if len(notes) > 0:
                ### Выводим все его заметки
                ### Создаем переменную, она будет содержать одно целое число: индекс заметки, которую пользователь хочет удалить.
                ### Функция correct_index_int_for_delete() проверяет, чтобы пользователь ввёл целое число в диапазоне индексов списка notes
                ### Задаем параметр для функции update_note(): наш основной список с индексом заметки, которую захотел удалить пользователь
                ### Так как индексирование начинается с 0, у числа введённого пользователем отнимаем 1
                display_notes(notes)
                index_note = correct_index_int_for_delete() - 1
                delete_note(notes, index_note)
            else:
                print("\nУ вас нет сохранённых заметок. Возвращаю к меню")

        if answer_option == 5:
            if len(notes) > 0:
                ### Вызываем функцию поиска заметки, пользователь может искать по одному из параметров или сразу по двум параметрам
                print("\nНачинаю поиск заметки")
                search_notes(notes, input(
                    "Введите слово или предложение одного из разделов(username, title, content) или оставьте поле пустым: "),
                             input("Введите статус или оставьте поле пустым: "))
            else:
                print("\nУ вас нет сохранённых заметок. Возвращаю к меню")

        if answer_option == 6:
            print("\nДо новых встреч!")
            break
